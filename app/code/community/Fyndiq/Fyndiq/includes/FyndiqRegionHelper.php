<?php

class FyndiqRegionHelper
{

    const CODE_DE = 'DE';
    const CODE_SE = 'SE';

    private static $defaultRegionCodes = array(
        self::CODE_DE => 'BER',
        self::CODE_SE => '1xxxx',
    );

    private static $codeName = array(
        self::CODE_DE => array(
            'NDS' => 'Niedersachsen',
            'BAW' => 'Baden-Württemberg',
            'BAY' => 'Bayern',
            'BER' => 'Berlin',
            'BRG' => 'Brandenburg',
            'BRE' => 'Bremen',
            'HAM' => 'Hamburg',
            'HES' => 'Hessen',
            'MEC' => 'Mecklenburg-Vorpommern',
            'NRW' => 'Nordrhein-Westfalen',
            'RHE' => 'Rheinland-Pfalz',
            'SAR' => 'Saarland',
            'SAS' => 'Sachsen',
            'SAC' => 'Sachsen-Anhalt',
            'SCN' => 'Schleswig-Holstein',
            'THE' => 'Thüringen',
        ),
        self::CODE_SE => array(
            '1xxxx' => 'Greater Stockholm',
            '2xxxx' => 'Skåne',
            '3xxxx' => 'South-East',
            '4xxxx' => 'South-West',
            '5xxxx' => 'South Central',
            '6xxxx' => 'East',
            '7xxxx' => 'North Central',
            '8xxxx' => 'Southern Norrland',
            '9xxxx' => 'Northern Norrland',
         ),
    );

    private static $ranges = array(
        self::CODE_DE => array(
            array(1001, 1936, 'SAS'),
            array(1941, 1998, 'BRG'),
            array(2601, 2999, 'SAS'),
            array(3001, 3253, 'BRG'),
            array(4001, 4579, 'SAS'),
            array(4581, 4639, 'THE'),
            array(4641, 4889, 'SAS'),
            array(4891, 4938, 'BRG'),
            array(6001, 6548, 'SAC'),
            array(6551, 6578, 'THE'),
            array(6601, 6928, 'SAC'),
            array(7301, 7919, 'THE'),
            array(7919, 7919, 'SAS'),
            array(7919, 7919, 'THE'),
            array(7919, 7919, 'SAS'),
            array(7920, 7950, 'THE'),
            array(7951, 7951, 'SAS'),
            array(7952, 7952, 'THE'),
            array(7952, 7952, 'SAS'),
            array(7953, 7980, 'THE'),
            array(7982, 7982, 'SAS'),
            array(7985, 7985, 'THE'),
            array(7985, 7985, 'SAS'),
            array(7985, 7989, 'THE'),
            array(8001, 9669, 'SAS'),
            array(10001, 14330, 'BER'),
            array(14401, 14715, 'BRG'),
            array(14715, 14715, 'SAC'),
            array(14723, 16949, 'BRG'),
            array(17001, 17256, 'MEC'),
            array(17258, 17258, 'BRG'),
            array(17258, 17259, 'MEC'),
            array(17261, 17291, 'BRG'),
            array(17301, 17309, 'MEC'),
            array(17309, 17309, 'BRG'),
            array(17309, 17321, 'MEC'),
            array(17321, 17321, 'BRG'),
            array(17321, 17322, 'MEC'),
            array(17326, 17326, 'BRG'),
            array(17328, 17331, 'MEC'),
            array(17335, 17335, 'BRG'),
            array(17335, 17335, 'MEC'),
            array(17337, 17337, 'BRG'),
            array(17337, 19260, 'MEC'),
            array(19271, 19273, 'NDS'),
            array(19273, 19273, 'MEC'),
            array(19273, 19306, 'MEC'),
            array(19307, 19357, 'BRG'),
            array(19357, 19417, 'MEC'),
            array(20001, 21037, 'HAM'),
            array(21039, 21039, 'SCN'),
            array(21039, 21170, 'HAM'),
            array(21202, 21449, 'NDS'),
            array(21451, 21521, 'SCN'),
            array(21522, 21522, 'NDS'),
            array(21524, 21529, 'SCN'),
            array(21601, 21789, 'NDS'),
            array(22001, 22113, 'HAM'),
            array(22113, 22113, 'SCN'),
            array(22115, 22143, 'HAM'),
            array(22145, 22145, 'SCN'),
            array(22145, 22145, 'HAM'),
            array(22145, 22145, 'SCN'),
            array(22147, 22786, 'HAM'),
            array(22801, 23919, 'SCN'),
            array(23921, 23999, 'MEC'),
            array(24001, 25999, 'SCN'),
            array(26001, 27478, 'NDS'),
            array(27483, 27498, 'SCN'),
            array(27499, 27499, 'HAM'),
            array(27501, 27580, 'BRE'),
            array(27607, 27809, 'NDS'),
            array(28001, 28779, 'BRE'),
            array(28784, 29399, 'NDS'),
            array(29401, 29416, 'SAC'),
            array(29431, 31868, 'NDS'),
            array(32001, 33829, 'NRW'),
            array(34001, 34329, 'HES'),
            array(34331, 34353, 'NDS'),
            array(34355, 34355, 'HES'),
            array(34355, 34355, 'NDS'),
            array(34356, 34399, 'HES'),
            array(34401, 34439, 'NRW'),
            array(34441, 36399, 'HES'),
            array(36401, 36469, 'THE'),
            array(37001, 37194, 'NDS'),
            array(37194, 37195, 'HES'),
            array(37197, 37199, 'NDS'),
            array(37201, 37299, 'HES'),
            array(37301, 37359, 'THE'),
            array(37401, 37649, 'NDS'),
            array(37651, 37688, 'NRW'),
            array(37689, 37691, 'NDS'),
            array(37692, 37696, 'NRW'),
            array(37697, 38479, 'NDS'),
            array(38481, 38489, 'SAC'),
            array(38501, 38729, 'NDS'),
            array(38801, 39649, 'SAC'),
            array(40001, 48432, 'NRW'),
            array(48442, 48465, 'NDS'),
            array(48466, 48477, 'NRW'),
            array(48478, 48480, 'NDS'),
            array(48481, 48485, 'NRW'),
            array(48486, 48488, 'NDS'),
            array(48489, 48496, 'NRW'),
            array(48497, 48531, 'NDS'),
            array(48541, 48739, 'NRW'),
            array(49001, 49459, 'NDS'),
            array(49461, 49549, 'NRW'),
            array(49551, 49849, 'NDS'),
            array(50101, 51597, 'NRW'),
            array(51598, 51598, 'RHE'),
            array(51601, 53359, 'NRW'),
            array(53401, 53579, 'RHE'),
            array(53581, 53604, 'NRW'),
            array(53614, 53619, 'RHE'),
            array(53621, 53949, 'NRW'),
            array(54181, 55239, 'RHE'),
            array(55240, 55252, 'HES'),
            array(55253, 56869, 'RHE'),
            array(57001, 57489, 'NRW'),
            array(57501, 57648, 'RHE'),
            array(58001, 59966, 'NRW'),
            array(59969, 59969, 'HES'),
            array(59969, 59969, 'NRW'),
            array(60001, 63699, 'HES'),
            array(63701, 63774, 'BAY'),
            array(63776, 63776, 'HES'),
            array(63776, 63928, 'BAY'),
            array(63928, 63928, 'BAW'),
            array(63930, 63939, 'BAY'),
            array(64201, 64753, 'HES'),
            array(64754, 64754, 'BAW'),
            array(64754, 65326, 'HES'),
            array(65326, 65326, 'RHE'),
            array(65327, 65391, 'HES'),
            array(65391, 65391, 'RHE'),
            array(65392, 65556, 'HES'),
            array(65558, 65582, 'RHE'),
            array(65583, 65620, 'HES'),
            array(65621, 65626, 'RHE'),
            array(65627, 65627, 'HES'),
            array(65629, 65629, 'RHE'),
            array(65701, 65936, 'HES'),
            array(66001, 66459, 'SAR'),
            array(66461, 66509, 'RHE'),
            array(66511, 66839, 'SAR'),
            array(66841, 67829, 'RHE'),
            array(68001, 68312, 'BAW'),
            array(68501, 68519, 'HES'),
            array(68520, 68549, 'BAW'),
            array(68601, 68649, 'HES'),
            array(68701, 69234, 'BAW'),
            array(69235, 69239, 'HES'),
            array(69240, 69429, 'BAW'),
            array(69430, 69431, 'HES'),
            array(69434, 69434, 'BAW'),
            array(69434, 69434, 'HES'),
            array(69435, 69469, 'BAW'),
            array(69479, 69488, 'HES'),
            array(69489, 69502, 'BAW'),
            array(69503, 69509, 'HES'),
            array(69510, 69514, 'BAW'),
            array(69515, 69518, 'HES'),
            array(70001, 74592, 'BAW'),
            array(74594, 74594, 'BAY'),
            array(74594, 76709, 'BAW'),
            array(76711, 76891, 'RHE'),
            array(77601, 79879, 'BAW'),
            array(80001, 87490, 'BAY'),
            array(87493, 87561, 'BAY'),
            array(87571, 87789, 'BAY'),
            array(88001, 88099, 'BAW'),
            array(88101, 88146, 'BAY'),
            array(88147, 88147, 'BAW'),
            array(88147, 88179, 'BAY'),
            array(88181, 89079, 'BAW'),
            array(89081, 89081, 'BAY'),
            array(89081, 89085, 'BAW'),
            array(89087, 89087, 'BAY'),
            array(89090, 89198, 'BAW'),
            array(89201, 89449, 'BAY'),
            array(89501, 89619, 'BAW'),
            array(90001, 96489, 'BAY'),
            array(96501, 96529, 'THE'),
            array(97001, 97859, 'BAY'),
            array(97861, 97877, 'BAW'),
            array(97888, 97892, 'BAY'),
            array(97893, 97896, 'BAW'),
            array(97896, 97896, 'BAY'),
            array(97897, 97900, 'BAW'),
            array(97901, 97909, 'BAY'),
            array(97911, 97999, 'BAW'),
            array(98501, 99998, 'THE'),
        ),
        self::CODE_SE => array(
            array(10000, 19999, '1xxxx'),
            array(20000, 29999, '2xxxx'),
            array(30000, 39999, '3xxxx'),
            array(40000, 49999, '4xxxx'),
            array(50000, 59999, '5xxxx'),
            array(60000, 69999, '6xxxx'),
            array(70000, 79999, '7xxxx'),
            array(80000, 89999, '8xxxx'),
            array(90000, 99999, '9xxxx'),
        )
    );

    public static function codeToRegionCode($code, $countryCode)
    {
        $code = intval($code);
        foreach (self::$ranges[$countryCode] as $range) {
            if ($code >= $range[0] && $code <= $range[1]) {
                return $range[2];
            }
        }
        return self::$defaultRegionCodes[$countryCode];
    }

    public static function getRegionName($code, $countryCode)
    {
        if (isset(self::$codeName[$countryCode][$code])) {
            return self::$codeName[$countryCode][$code];
        }
        throw new Exception(sprintf('Region %s not found in %s', $code, $countryCode));
    }
}
